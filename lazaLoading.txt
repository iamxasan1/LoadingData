lazy loading hamma malumotlarni chaqirilmaguncha null qilib saqlaydi. Qachonki ma`lum bir table ga murojaat qilinsa shundagina u 
tableni propertylarini data bilan to`ldirib jonatadi. murojaat qilinmagan table larni esa default null olib ketadi.
o`zaro bog`langan class propertylari virtual bo`lishi lozim. shundagina ularga ozgartirish kiritib qiymat berishimiz mumkin boladi.

Lazy loading yaxshi tarafi: kerakli konfiguratsiyalarni bajarib qoyib database dan xoxlagan malumotimizni olish imkonini beradi. 
Masalan user obyekti listi chaqirilib birato`lasi uning kanal bloglarini ham chaqirib ishlatishimiz mumkin.
Ammo bunda har bitta table ni olib keloish uchun databasega alohida so`rov jo`nataadi. bu esa datbasega kelayotgan so`rovlar 
sonini keskin oshib ketishiga sabab bo`ladi. 

kerakli konfigiratsiyalar: microsoftEntityFrameworkCore
						    microsoftEntityFrameworkCore.Design
							 microsoftEntityFrameworkCore.Tools
							  microsoftEntityFrameworkCore.Proxies

larni nuget paketlardan skachat qilinadi,
AppDbContextga 
 options.builder ga 
 .UseLazyLoadingProxies()
 qoshiladi.

hamma class lar public
ozaro boglangan data(releated data)lar virtual

public class BlogUser
    {
        public int Id { get; set; }
        public Guid UserId { get; set; }
        public virtual User User { get; set; }
        public int BlogId { get; set; }
        public virtual Blog Blog { get; set; }
        public bool IsAdmin { get; set; }
    }

    so`ngra ishlatilinadi. Masalan:

var users = db.Users.ToList();

foreach (var user in users)
{
    foreach (var blogUser in user.BlogUsers)
    {
        Console.WriteLine($"username : {user.Name}, BlogId: {blogUser.BlogId}, blog name: {blogUser.Blog.Title}");
    }
}
